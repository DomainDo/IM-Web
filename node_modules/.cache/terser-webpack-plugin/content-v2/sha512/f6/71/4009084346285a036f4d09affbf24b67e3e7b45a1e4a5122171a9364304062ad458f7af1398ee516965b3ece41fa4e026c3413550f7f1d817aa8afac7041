{"map":"{\"version\":3,\"sources\":[\"vendors~app.8274aa284fefa7dab53d.hot-update.js\"],\"names\":[\"webpackHotUpdate\",\"./node_modules/vue-resource/dist/vue-resource.esm.js\",\"module\",\"__webpack_exports__\",\"__webpack_require__\",\"eval\"],\"mappings\":\"AAAAA,iBAAiB,cAAc,CAEzBC;;;;qDAKA,SAAUC,OAAQC,oBAAqBC,qBAE7C,aACAC,KAAK\"}","code":"webpackHotUpdate(\"vendors~app\",{\"./node_modules/vue-resource/dist/vue-resource.esm.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/vue-resource/dist/vue-resource.esm.js ***!\n  \\************************************************************/\n/*! exports provided: default, Url, Http, Resource */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Url\\\", function() { return Url; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Http\\\", function() { return Http; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Resource\\\", function() { return Resource; });\\n/*!\\n * vue-resource v1.5.3\\n * https://github.com/pagekit/vue-resource\\n * Released under the MIT License.\\n */\\n\\n/**\\n * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)\\n */\\nvar RESOLVED = 0;\\nvar REJECTED = 1;\\nvar PENDING = 2;\\nfunction Promise$1(executor) {\\n  this.state = PENDING;\\n  this.value = undefined;\\n  this.deferred = [];\\n  var promise = this;\\n\\n  try {\\n    executor(function (x) {\\n      promise.resolve(x);\\n    }, function (r) {\\n      promise.reject(r);\\n    });\\n  } catch (e) {\\n    promise.reject(e);\\n  }\\n}\\n\\nPromise$1.reject = function (r) {\\n  return new Promise$1(function (resolve, reject) {\\n    reject(r);\\n  });\\n};\\n\\nPromise$1.resolve = function (x) {\\n  return new Promise$1(function (resolve, reject) {\\n    resolve(x);\\n  });\\n};\\n\\nPromise$1.all = function all(iterable) {\\n  return new Promise$1(function (resolve, reject) {\\n    var count = 0,\\n        result = [];\\n\\n    if (iterable.length === 0) {\\n      resolve(result);\\n    }\\n\\n    function resolver(i) {\\n      return function (x) {\\n        result[i] = x;\\n        count += 1;\\n\\n        if (count === iterable.length) {\\n          resolve(result);\\n        }\\n      };\\n    }\\n\\n    for (var i = 0; i < iterable.length; i += 1) {\\n      Promise$1.resolve(iterable[i]).then(resolver(i), reject);\\n    }\\n  });\\n};\\n\\nPromise$1.race = function race(iterable) {\\n  return new Promise$1(function (resolve, reject) {\\n    for (var i = 0; i < iterable.length; i += 1) {\\n      Promise$1.resolve(iterable[i]).then(resolve, reject);\\n    }\\n  });\\n};\\n\\nvar p = Promise$1.prototype;\\n\\np.resolve = function resolve(x) {\\n  var promise = this;\\n\\n  if (promise.state === PENDING) {\\n    if (x === promise) {\\n      throw new TypeError('Promise settled with itself.');\\n    }\\n\\n    var called = false;\\n\\n    try {\\n      var then = x && x['then'];\\n\\n      if (x !== null && typeof x === 'object' && typeof then === 'function') {\\n        then.call(x, function (x) {\\n          if (!called) {\\n            promise.resolve(x);\\n          }\\n\\n          called = true;\\n        }, function (r) {\\n          if (!called) {\\n            promise.reject(r);\\n          }\\n\\n          called = true;\\n        });\\n        return;\\n      }\\n    } catch (e) {\\n      if (!called) {\\n        promise.reject(e);\\n      }\\n\\n      return;\\n    }\\n\\n    promise.state = RESOLVED;\\n    promise.value = x;\\n    promise.notify();\\n  }\\n};\\n\\np.reject = function reject(reason) {\\n  var promise = this;\\n\\n  if (promise.state === PENDING) {\\n    if (reason === promise) {\\n      throw new TypeError('Promise settled with itself.');\\n    }\\n\\n    promise.state = REJECTED;\\n    promise.value = reason;\\n    promise.notify();\\n  }\\n};\\n\\np.notify = function notify() {\\n  var promise = this;\\n  nextTick(function () {\\n    if (promise.state !== PENDING) {\\n      while (promise.deferred.length) {\\n        var deferred = promise.deferred.shift(),\\n            onResolved = deferred[0],\\n            onRejected = deferred[1],\\n            resolve = deferred[2],\\n            reject = deferred[3];\\n\\n        try {\\n          if (promise.state === RESOLVED) {\\n            if (typeof onResolved === 'function') {\\n              resolve(onResolved.call(undefined, promise.value));\\n            } else {\\n              resolve(promise.value);\\n            }\\n          } else if (promise.state === REJECTED) {\\n            if (typeof onRejected === 'function') {\\n              resolve(onRejected.call(undefined, promise.value));\\n            } else {\\n              reject(promise.value);\\n            }\\n          }\\n        } catch (e) {\\n          reject(e);\\n        }\\n      }\\n    }\\n  });\\n};\\n\\np.then = function then(onResolved, onRejected) {\\n  var promise = this;\\n  return new Promise$1(function (resolve, reject) {\\n    promise.deferred.push([onResolved, onRejected, resolve, reject]);\\n    promise.notify();\\n  });\\n};\\n\\np[\\\"catch\\\"] = function (onRejected) {\\n  return this.then(undefined, onRejected);\\n};\\n\\n/**\\n * Promise adapter.\\n */\\n\\nif (typeof Promise === 'undefined') {\\n  window.Promise = Promise$1;\\n}\\n\\nfunction PromiseObj(executor, context) {\\n  if (executor instanceof Promise) {\\n    this.promise = executor;\\n  } else {\\n    this.promise = new Promise(executor.bind(context));\\n  }\\n\\n  this.context = context;\\n}\\n\\nPromiseObj.all = function (iterable, context) {\\n  return new PromiseObj(Promise.all(iterable), context);\\n};\\n\\nPromiseObj.resolve = function (value, context) {\\n  return new PromiseObj(Promise.resolve(value), context);\\n};\\n\\nPromiseObj.reject = function (reason, context) {\\n  return new PromiseObj(Promise.reject(reason), context);\\n};\\n\\nPromiseObj.race = function (iterable, context) {\\n  return new PromiseObj(Promise.race(iterable), context);\\n};\\n\\nvar p$1 = PromiseObj.prototype;\\n\\np$1.bind = function (context) {\\n  this.context = context;\\n  return this;\\n};\\n\\np$1.then = function (fulfilled, rejected) {\\n  if (fulfilled && fulfilled.bind && this.context) {\\n    fulfilled = fulfilled.bind(this.context);\\n  }\\n\\n  if (rejected && rejected.bind && this.context) {\\n    rejected = rejected.bind(this.context);\\n  }\\n\\n  return new PromiseObj(this.promise.then(fulfilled, rejected), this.context);\\n};\\n\\np$1[\\\"catch\\\"] = function (rejected) {\\n  if (rejected && rejected.bind && this.context) {\\n    rejected = rejected.bind(this.context);\\n  }\\n\\n  return new PromiseObj(this.promise[\\\"catch\\\"](rejected), this.context);\\n};\\n\\np$1[\\\"finally\\\"] = function (callback) {\\n  return this.then(function (value) {\\n    callback.call(this);\\n    return value;\\n  }, function (reason) {\\n    callback.call(this);\\n    return Promise.reject(reason);\\n  });\\n};\\n\\n/**\\n * Utility functions.\\n */\\nvar _ref = {},\\n    hasOwnProperty = _ref.hasOwnProperty,\\n    slice = [].slice,\\n    debug = false,\\n    ntick;\\nvar inBrowser = typeof window !== 'undefined';\\nfunction Util (_ref2) {\\n  var config = _ref2.config,\\n      nextTick = _ref2.nextTick;\\n  ntick = nextTick;\\n  debug = config.debug || !config.silent;\\n}\\nfunction warn(msg) {\\n  if (typeof console !== 'undefined' && debug) {\\n    console.warn('[VueResource warn]: ' + msg);\\n  }\\n}\\nfunction error(msg) {\\n  if (typeof console !== 'undefined') {\\n    console.error(msg);\\n  }\\n}\\nfunction nextTick(cb, ctx) {\\n  return ntick(cb, ctx);\\n}\\nfunction trim(str) {\\n  return str ? str.replace(/^\\\\s*|\\\\s*$/g, '') : '';\\n}\\nfunction trimEnd(str, chars) {\\n  if (str && chars === undefined) {\\n    return str.replace(/\\\\s+$/, '');\\n  }\\n\\n  if (!str || !chars) {\\n    return str;\\n  }\\n\\n  return str.replace(new RegExp(\\\"[\\\" + chars + \\\"]+$\\\"), '');\\n}\\nfunction toLower(str) {\\n  return str ? str.toLowerCase() : '';\\n}\\nfunction toUpper(str) {\\n  return str ? str.toUpperCase() : '';\\n}\\nvar isArray = Array.isArray;\\nfunction isString(val) {\\n  return typeof val === 'string';\\n}\\nfunction isFunction(val) {\\n  return typeof val === 'function';\\n}\\nfunction isObject(obj) {\\n  return obj !== null && typeof obj === 'object';\\n}\\nfunction isPlainObject(obj) {\\n  return isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype;\\n}\\nfunction isBlob(obj) {\\n  return typeof Blob !== 'undefined' && obj instanceof Blob;\\n}\\nfunction isFormData(obj) {\\n  return typeof FormData !== 'undefined' && obj instanceof FormData;\\n}\\nfunction when(value, fulfilled, rejected) {\\n  var promise = PromiseObj.resolve(value);\\n\\n  if (arguments.length < 2) {\\n    return promise;\\n  }\\n\\n  return promise.then(fulfilled, rejected);\\n}\\nfunction options(fn, obj, opts) {\\n  opts = opts || {};\\n\\n  if (isFunction(opts)) {\\n    opts = opts.call(obj);\\n  }\\n\\n  return merge(fn.bind({\\n    $vm: obj,\\n    $options: opts\\n  }), fn, {\\n    $options: opts\\n  });\\n}\\nfunction each(obj, iterator) {\\n  var i, key;\\n\\n  if (isArray(obj)) {\\n    for (i = 0; i < obj.length; i++) {\\n      iterator.call(obj[i], obj[i], i);\\n    }\\n  } else if (isObject(obj)) {\\n    for (key in obj) {\\n      if (hasOwnProperty.call(obj, key)) {\\n        iterator.call(obj[key], obj[key], key);\\n      }\\n    }\\n  }\\n\\n  return obj;\\n}\\nvar assign = Object.assign || _assign;\\nfunction merge(target) {\\n  var args = slice.call(arguments, 1);\\n  args.forEach(function (source) {\\n    _merge(target, source, true);\\n  });\\n  return target;\\n}\\nfunction defaults(target) {\\n  var args = slice.call(arguments, 1);\\n  args.forEach(function (source) {\\n    for (var key in source) {\\n      if (target[key] === undefined) {\\n        target[key] = source[key];\\n      }\\n    }\\n  });\\n  return target;\\n}\\n\\nfunction _assign(target) {\\n  var args = slice.call(arguments, 1);\\n  args.forEach(function (source) {\\n    _merge(target, source);\\n  });\\n  return target;\\n}\\n\\nfunction _merge(target, source, deep) {\\n  for (var key in source) {\\n    if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\\n      if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\\n        target[key] = {};\\n      }\\n\\n      if (isArray(source[key]) && !isArray(target[key])) {\\n        target[key] = [];\\n      }\\n\\n      _merge(target[key], source[key], deep);\\n    } else if (source[key] !== undefined) {\\n      target[key] = source[key];\\n    }\\n  }\\n}\\n\\n/**\\n * Root Prefix Transform.\\n */\\nfunction root (options$$1, next) {\\n  var url = next(options$$1);\\n\\n  if (isString(options$$1.root) && !/^(https?:)?\\\\//.test(url)) {\\n    url = trimEnd(options$$1.root, '/') + '/' + url;\\n  }\\n\\n  return url;\\n}\\n\\n/**\\n * Query Parameter Transform.\\n */\\nfunction query (options$$1, next) {\\n  var urlParams = Object.keys(Url.options.params),\\n      query = {},\\n      url = next(options$$1);\\n  each(options$$1.params, function (value, key) {\\n    if (urlParams.indexOf(key) === -1) {\\n      query[key] = value;\\n    }\\n  });\\n  query = Url.params(query);\\n\\n  if (query) {\\n    url += (url.indexOf('?') == -1 ? '?' : '&') + query;\\n  }\\n\\n  return url;\\n}\\n\\n/**\\n * URL Template v2.0.6 (https://github.com/bramstein/url-template)\\n */\\nfunction expand(url, params, variables) {\\n  var tmpl = parse(url),\\n      expanded = tmpl.expand(params);\\n\\n  if (variables) {\\n    variables.push.apply(variables, tmpl.vars);\\n  }\\n\\n  return expanded;\\n}\\nfunction parse(template) {\\n  var operators = ['+', '#', '.', '/', ';', '?', '&'],\\n      variables = [];\\n  return {\\n    vars: variables,\\n    expand: function expand(context) {\\n      return template.replace(/\\\\{([^{}]+)\\\\}|([^{}]+)/g, function (_, expression, literal) {\\n        if (expression) {\\n          var operator = null,\\n              values = [];\\n\\n          if (operators.indexOf(expression.charAt(0)) !== -1) {\\n            operator = expression.charAt(0);\\n            expression = expression.substr(1);\\n          }\\n\\n          expression.split(/,/g).forEach(function (variable) {\\n            var tmp = /([^:*]*)(?::(\\\\d+)|(\\\\*))?/.exec(variable);\\n            values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\\n            variables.push(tmp[1]);\\n          });\\n\\n          if (operator && operator !== '+') {\\n            var separator = ',';\\n\\n            if (operator === '?') {\\n              separator = '&';\\n            } else if (operator !== '#') {\\n              separator = operator;\\n            }\\n\\n            return (values.length !== 0 ? operator : '') + values.join(separator);\\n          } else {\\n            return values.join(',');\\n          }\\n        } else {\\n          return encodeReserved(literal);\\n        }\\n      });\\n    }\\n  };\\n}\\n\\nfunction getValues(context, operator, key, modifier) {\\n  var value = context[key],\\n      result = [];\\n\\n  if (isDefined(value) && value !== '') {\\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\\n      value = value.toString();\\n\\n      if (modifier && modifier !== '*') {\\n        value = value.substring(0, parseInt(modifier, 10));\\n      }\\n\\n      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));\\n    } else {\\n      if (modifier === '*') {\\n        if (Array.isArray(value)) {\\n          value.filter(isDefined).forEach(function (value) {\\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));\\n          });\\n        } else {\\n          Object.keys(value).forEach(function (k) {\\n            if (isDefined(value[k])) {\\n              result.push(encodeValue(operator, value[k], k));\\n            }\\n          });\\n        }\\n      } else {\\n        var tmp = [];\\n\\n        if (Array.isArray(value)) {\\n          value.filter(isDefined).forEach(function (value) {\\n            tmp.push(encodeValue(operator, value));\\n          });\\n        } else {\\n          Object.keys(value).forEach(function (k) {\\n            if (isDefined(value[k])) {\\n              tmp.push(encodeURIComponent(k));\\n              tmp.push(encodeValue(operator, value[k].toString()));\\n            }\\n          });\\n        }\\n\\n        if (isKeyOperator(operator)) {\\n          result.push(encodeURIComponent(key) + '=' + tmp.join(','));\\n        } else if (tmp.length !== 0) {\\n          result.push(tmp.join(','));\\n        }\\n      }\\n    }\\n  } else {\\n    if (operator === ';') {\\n      result.push(encodeURIComponent(key));\\n    } else if (value === '' && (operator === '&' || operator === '?')) {\\n      result.push(encodeURIComponent(key) + '=');\\n    } else if (value === '') {\\n      result.push('');\\n    }\\n  }\\n\\n  return result;\\n}\\n\\nfunction isDefined(value) {\\n  return value !== undefined && value !== null;\\n}\\n\\nfunction isKeyOperator(operator) {\\n  return operator === ';' || operator === '&' || operator === '?';\\n}\\n\\nfunction encodeValue(operator, value, key) {\\n  value = operator === '+' || operator === '#' ? encodeReserved(value) : encodeURIComponent(value);\\n\\n  if (key) {\\n    return encodeURIComponent(key) + '=' + value;\\n  } else {\\n    return value;\\n  }\\n}\\n\\nfunction encodeReserved(str) {\\n  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\\n    if (!/%[0-9A-Fa-f]/.test(part)) {\\n      part = encodeURI(part);\\n    }\\n\\n    return part;\\n  }).join('');\\n}\\n\\n/**\\n * URL Template (RFC 6570) Transform.\\n */\\nfunction template (options) {\\n  var variables = [],\\n      url = expand(options.url, options.params, variables);\\n  variables.forEach(function (key) {\\n    delete options.params[key];\\n  });\\n  return url;\\n}\\n\\n/**\\n * Service for URL templating.\\n */\\nfunction Url(url, params) {\\n  var self = this || {},\\n      options$$1 = url,\\n      transform;\\n\\n  if (isString(url)) {\\n    options$$1 = {\\n      url: url,\\n      params: params\\n    };\\n  }\\n\\n  options$$1 = merge({}, Url.options, self.$options, options$$1);\\n  Url.transforms.forEach(function (handler) {\\n    if (isString(handler)) {\\n      handler = Url.transform[handler];\\n    }\\n\\n    if (isFunction(handler)) {\\n      transform = factory(handler, transform, self.$vm);\\n    }\\n  });\\n  return transform(options$$1);\\n}\\n/**\\n * Url options.\\n */\\n\\nUrl.options = {\\n  url: '',\\n  root: null,\\n  params: {}\\n};\\n/**\\n * Url transforms.\\n */\\n\\nUrl.transform = {\\n  template: template,\\n  query: query,\\n  root: root\\n};\\nUrl.transforms = ['template', 'query', 'root'];\\n/**\\n * Encodes a Url parameter string.\\n *\\n * @param {Object} obj\\n */\\n\\nUrl.params = function (obj) {\\n  var params = [],\\n      escape = encodeURIComponent;\\n\\n  params.add = function (key, value) {\\n    if (isFunction(value)) {\\n      value = value();\\n    }\\n\\n    if (value === null) {\\n      value = '';\\n    }\\n\\n    this.push(escape(key) + '=' + escape(value));\\n  };\\n\\n  serialize(params, obj);\\n  return params.join('&').replace(/%20/g, '+');\\n};\\n/**\\n * Parse a URL and return its components.\\n *\\n * @param {String} url\\n */\\n\\n\\nUrl.parse = function (url) {\\n  var el = document.createElement('a');\\n\\n  if (document.documentMode) {\\n    el.href = url;\\n    url = el.href;\\n  }\\n\\n  el.href = url;\\n  return {\\n    href: el.href,\\n    protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',\\n    port: el.port,\\n    host: el.host,\\n    hostname: el.hostname,\\n    pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,\\n    search: el.search ? el.search.replace(/^\\\\?/, '') : '',\\n    hash: el.hash ? el.hash.replace(/^#/, '') : ''\\n  };\\n};\\n\\nfunction factory(handler, next, vm) {\\n  return function (options$$1) {\\n    return handler.call(vm, options$$1, next);\\n  };\\n}\\n\\nfunction serialize(params, obj, scope) {\\n  var array = isArray(obj),\\n      plain = isPlainObject(obj),\\n      hash;\\n  each(obj, function (value, key) {\\n    hash = isObject(value) || isArray(value);\\n\\n    if (scope) {\\n      key = scope + '[' + (plain || hash ? key : '') + ']';\\n    }\\n\\n    if (!scope && array) {\\n      params.add(value.name, value.value);\\n    } else if (hash) {\\n      serialize(params, value, key);\\n    } else {\\n      params.add(key, value);\\n    }\\n  });\\n}\\n\\n/**\\n * XDomain client (Internet Explorer).\\n */\\nfunction xdrClient (request) {\\n  return new PromiseObj(function (resolve) {\\n    var xdr = new XDomainRequest(),\\n        handler = function handler(_ref) {\\n      var type = _ref.type;\\n      var status = 0;\\n\\n      if (type === 'load') {\\n        status = 200;\\n      } else if (type === 'error') {\\n        status = 500;\\n      }\\n\\n      resolve(request.respondWith(xdr.responseText, {\\n        status: status\\n      }));\\n    };\\n\\n    request.abort = function () {\\n      return xdr.abort();\\n    };\\n\\n    xdr.open(request.method, request.getUrl());\\n\\n    if (request.timeout) {\\n      xdr.timeout = request.timeout;\\n    }\\n\\n    xdr.onload = handler;\\n    xdr.onabort = handler;\\n    xdr.onerror = handler;\\n    xdr.ontimeout = handler;\\n\\n    xdr.onprogress = function () {};\\n\\n    xdr.send(request.getBody());\\n  });\\n}\\n\\n/**\\n * CORS Interceptor.\\n */\\nvar SUPPORTS_CORS = inBrowser && 'withCredentials' in new XMLHttpRequest();\\nfunction cors (request) {\\n  if (inBrowser) {\\n    var orgUrl = Url.parse(location.href);\\n    var reqUrl = Url.parse(request.getUrl());\\n\\n    if (reqUrl.protocol !== orgUrl.protocol || reqUrl.host !== orgUrl.host) {\\n      request.crossOrigin = true;\\n      request.emulateHTTP = false;\\n\\n      if (!SUPPORTS_CORS) {\\n        request.client = xdrClient;\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * Form data Interceptor.\\n */\\nfunction form (request) {\\n  if (isFormData(request.body)) {\\n    request.headers[\\\"delete\\\"]('Content-Type');\\n  } else if (isObject(request.body) && request.emulateJSON) {\\n    request.body = Url.params(request.body);\\n    request.headers.set('Content-Type', 'application/x-www-form-urlencoded');\\n  }\\n}\\n\\n/**\\n * JSON Interceptor.\\n */\\nfunction json (request) {\\n  var type = request.headers.get('Content-Type') || '';\\n\\n  if (isObject(request.body) && type.indexOf('application/json') === 0) {\\n    request.body = JSON.stringify(request.body);\\n  }\\n\\n  return function (response) {\\n    return response.bodyText ? when(response.text(), function (text) {\\n      var type = response.headers.get('Content-Type') || '';\\n\\n      if (type.indexOf('application/json') === 0 || isJson(text)) {\\n        try {\\n          response.body = JSON.parse(text);\\n        } catch (e) {\\n          response.body = null;\\n        }\\n      } else {\\n        response.body = text;\\n      }\\n\\n      return response;\\n    }) : response;\\n  };\\n}\\n\\nfunction isJson(str) {\\n  var start = str.match(/^\\\\s*(\\\\[|\\\\{)/);\\n  var end = {\\n    '[': /]\\\\s*$/,\\n    '{': /}\\\\s*$/\\n  };\\n  return start && end[start[1]].test(str);\\n}\\n\\n/**\\n * JSONP client (Browser).\\n */\\nfunction jsonpClient (request) {\\n  return new PromiseObj(function (resolve) {\\n    var name = request.jsonp || 'callback',\\n        callback = request.jsonpCallback || '_jsonp' + Math.random().toString(36).substr(2),\\n        body = null,\\n        handler,\\n        script;\\n\\n    handler = function handler(_ref) {\\n      var type = _ref.type;\\n      var status = 0;\\n\\n      if (type === 'load' && body !== null) {\\n        status = 200;\\n      } else if (type === 'error') {\\n        status = 500;\\n      }\\n\\n      if (status && window[callback]) {\\n        delete window[callback];\\n        document.body.removeChild(script);\\n      }\\n\\n      resolve(request.respondWith(body, {\\n        status: status\\n      }));\\n    };\\n\\n    window[callback] = function (result) {\\n      body = JSON.stringify(result);\\n    };\\n\\n    request.abort = function () {\\n      handler({\\n        type: 'abort'\\n      });\\n    };\\n\\n    request.params[name] = callback;\\n\\n    if (request.timeout) {\\n      setTimeout(request.abort, request.timeout);\\n    }\\n\\n    script = document.createElement('script');\\n    script.src = request.getUrl();\\n    script.type = 'text/javascript';\\n    script.async = true;\\n    script.onload = handler;\\n    script.onerror = handler;\\n    document.body.appendChild(script);\\n  });\\n}\\n\\n/**\\n * JSONP Interceptor.\\n */\\nfunction jsonp (request) {\\n  if (request.method == 'JSONP') {\\n    request.client = jsonpClient;\\n  }\\n}\\n\\n/**\\n * Before Interceptor.\\n */\\nfunction before (request) {\\n  if (isFunction(request.before)) {\\n    request.before.call(this, request);\\n  }\\n}\\n\\n/**\\n * HTTP method override Interceptor.\\n */\\nfunction method (request) {\\n  if (request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(request.method)) {\\n    request.headers.set('X-HTTP-Method-Override', request.method);\\n    request.method = 'POST';\\n  }\\n}\\n\\n/**\\n * Header Interceptor.\\n */\\nfunction header (request) {\\n  var headers = assign({}, Http.headers.common, !request.crossOrigin ? Http.headers.custom : {}, Http.headers[toLower(request.method)]);\\n  each(headers, function (value, name) {\\n    if (!request.headers.has(name)) {\\n      request.headers.set(name, value);\\n    }\\n  });\\n}\\n\\n/**\\n * XMLHttp client (Browser).\\n */\\nfunction xhrClient (request) {\\n  return new PromiseObj(function (resolve) {\\n    var xhr = new XMLHttpRequest(),\\n        handler = function handler(event) {\\n      var response = request.respondWith('response' in xhr ? xhr.response : xhr.responseText, {\\n        status: xhr.status === 1223 ? 204 : xhr.status,\\n        // IE9 status bug\\n        statusText: xhr.status === 1223 ? 'No Content' : trim(xhr.statusText)\\n      });\\n      each(trim(xhr.getAllResponseHeaders()).split('\\\\n'), function (row) {\\n        response.headers.append(row.slice(0, row.indexOf(':')), row.slice(row.indexOf(':') + 1));\\n      });\\n      resolve(response);\\n    };\\n\\n    request.abort = function () {\\n      return xhr.abort();\\n    };\\n\\n    xhr.open(request.method, request.getUrl(), true);\\n\\n    if (request.timeout) {\\n      xhr.timeout = request.timeout;\\n    }\\n\\n    if (request.responseType && 'responseType' in xhr) {\\n      xhr.responseType = request.responseType;\\n    }\\n\\n    if (request.withCredentials || request.credentials) {\\n      xhr.withCredentials = true;\\n    }\\n\\n    if (!request.crossOrigin) {\\n      request.headers.set('X-Requested-With', 'XMLHttpRequest');\\n    } // deprecated use downloadProgress\\n\\n\\n    if (isFunction(request.progress) && request.method === 'GET') {\\n      xhr.addEventListener('progress', request.progress);\\n    }\\n\\n    if (isFunction(request.downloadProgress)) {\\n      xhr.addEventListener('progress', request.downloadProgress);\\n    } // deprecated use uploadProgress\\n\\n\\n    if (isFunction(request.progress) && /^(POST|PUT)$/i.test(request.method)) {\\n      xhr.upload.addEventListener('progress', request.progress);\\n    }\\n\\n    if (isFunction(request.uploadProgress) && xhr.upload) {\\n      xhr.upload.addEventListener('progress', request.uploadProgress);\\n    }\\n\\n    request.headers.forEach(function (value, name) {\\n      xhr.setRequestHeader(name, value);\\n    });\\n    xhr.onload = handler;\\n    xhr.onabort = handler;\\n    xhr.onerror = handler;\\n    xhr.ontimeout = handler;\\n    xhr.send(request.getBody());\\n  });\\n}\\n\\n/**\\n * Http client (Node).\\n */\\nfunction nodeClient (request) {\\n  var client = __webpack_require__(/*! got */ 63);\\n\\n  return new PromiseObj(function (resolve) {\\n    var url = request.getUrl();\\n    var body = request.getBody();\\n    var method = request.method;\\n    var headers = {},\\n        handler;\\n    request.headers.forEach(function (value, name) {\\n      headers[name] = value;\\n    });\\n    client(url, {\\n      body: body,\\n      method: method,\\n      headers: headers\\n    }).then(handler = function handler(resp) {\\n      var response = request.respondWith(resp.body, {\\n        status: resp.statusCode,\\n        statusText: trim(resp.statusMessage)\\n      });\\n      each(resp.headers, function (value, name) {\\n        response.headers.set(name, value);\\n      });\\n      resolve(response);\\n    }, function (error$$1) {\\n      return handler(error$$1.response);\\n    });\\n  });\\n}\\n\\n/**\\n * Base client.\\n */\\nfunction Client (context) {\\n  var reqHandlers = [sendRequest],\\n      resHandlers = [];\\n\\n  if (!isObject(context)) {\\n    context = null;\\n  }\\n\\n  function Client(request) {\\n    while (reqHandlers.length) {\\n      var handler = reqHandlers.pop();\\n\\n      if (isFunction(handler)) {\\n        var _ret = function () {\\n          var response = void 0,\\n              next = void 0;\\n          response = handler.call(context, request, function (val) {\\n            return next = val;\\n          }) || next;\\n\\n          if (isObject(response)) {\\n            return {\\n              v: new PromiseObj(function (resolve, reject) {\\n                resHandlers.forEach(function (handler) {\\n                  response = when(response, function (response) {\\n                    return handler.call(context, response) || response;\\n                  }, reject);\\n                });\\n                when(response, resolve, reject);\\n              }, context)\\n            };\\n          }\\n\\n          if (isFunction(response)) {\\n            resHandlers.unshift(response);\\n          }\\n        }();\\n\\n        if (typeof _ret === \\\"object\\\") return _ret.v;\\n      } else {\\n        warn(\\\"Invalid interceptor of type \\\" + typeof handler + \\\", must be a function\\\");\\n      }\\n    }\\n  }\\n\\n  Client.use = function (handler) {\\n    reqHandlers.push(handler);\\n  };\\n\\n  return Client;\\n}\\n\\nfunction sendRequest(request) {\\n  var client = request.client || (inBrowser ? xhrClient : nodeClient);\\n  return client(request);\\n}\\n\\n/**\\n * HTTP Headers.\\n */\\n\\nvar Headers = /*#__PURE__*/function () {\\n  function Headers(headers) {\\n    var _this = this;\\n\\n    this.map = {};\\n    each(headers, function (value, name) {\\n      return _this.append(name, value);\\n    });\\n  }\\n\\n  var _proto = Headers.prototype;\\n\\n  _proto.has = function has(name) {\\n    return getName(this.map, name) !== null;\\n  };\\n\\n  _proto.get = function get(name) {\\n    var list = this.map[getName(this.map, name)];\\n    return list ? list.join() : null;\\n  };\\n\\n  _proto.getAll = function getAll(name) {\\n    return this.map[getName(this.map, name)] || [];\\n  };\\n\\n  _proto.set = function set(name, value) {\\n    this.map[normalizeName(getName(this.map, name) || name)] = [trim(value)];\\n  };\\n\\n  _proto.append = function append(name, value) {\\n    var list = this.map[getName(this.map, name)];\\n\\n    if (list) {\\n      list.push(trim(value));\\n    } else {\\n      this.set(name, value);\\n    }\\n  };\\n\\n  _proto[\\\"delete\\\"] = function _delete(name) {\\n    delete this.map[getName(this.map, name)];\\n  };\\n\\n  _proto.deleteAll = function deleteAll() {\\n    this.map = {};\\n  };\\n\\n  _proto.forEach = function forEach(callback, thisArg) {\\n    var _this2 = this;\\n\\n    each(this.map, function (list, name) {\\n      each(list, function (value) {\\n        return callback.call(thisArg, value, name, _this2);\\n      });\\n    });\\n  };\\n\\n  return Headers;\\n}();\\n\\nfunction getName(map, name) {\\n  return Object.keys(map).reduce(function (prev, curr) {\\n    return toLower(name) === toLower(curr) ? curr : prev;\\n  }, null);\\n}\\n\\nfunction normalizeName(name) {\\n  if (/[^a-z0-9\\\\-#$%&'*+.^_`|~]/i.test(name)) {\\n    throw new TypeError('Invalid character in header field name');\\n  }\\n\\n  return trim(name);\\n}\\n\\n/**\\n * HTTP Response.\\n */\\n\\nvar Response = /*#__PURE__*/function () {\\n  function Response(body, _ref) {\\n    var url = _ref.url,\\n        headers = _ref.headers,\\n        status = _ref.status,\\n        statusText = _ref.statusText;\\n    this.url = url;\\n    this.ok = status >= 200 && status < 300;\\n    this.status = status || 0;\\n    this.statusText = statusText || '';\\n    this.headers = new Headers(headers);\\n    this.body = body;\\n\\n    if (isString(body)) {\\n      this.bodyText = body;\\n    } else if (isBlob(body)) {\\n      this.bodyBlob = body;\\n\\n      if (isBlobText(body)) {\\n        this.bodyText = blobText(body);\\n      }\\n    }\\n  }\\n\\n  var _proto = Response.prototype;\\n\\n  _proto.blob = function blob() {\\n    return when(this.bodyBlob);\\n  };\\n\\n  _proto.text = function text() {\\n    return when(this.bodyText);\\n  };\\n\\n  _proto.json = function json() {\\n    return when(this.text(), function (text) {\\n      return JSON.parse(text);\\n    });\\n  };\\n\\n  return Response;\\n}();\\nObject.defineProperty(Response.prototype, 'data', {\\n  get: function get() {\\n    return this.body;\\n  },\\n  set: function set(body) {\\n    this.body = body;\\n  }\\n});\\n\\nfunction blobText(body) {\\n  return new PromiseObj(function (resolve) {\\n    var reader = new FileReader();\\n    reader.readAsText(body);\\n\\n    reader.onload = function () {\\n      resolve(reader.result);\\n    };\\n  });\\n}\\n\\nfunction isBlobText(body) {\\n  return body.type.indexOf('text') === 0 || body.type.indexOf('json') !== -1;\\n}\\n\\n/**\\n * HTTP Request.\\n */\\n\\nvar Request = /*#__PURE__*/function () {\\n  function Request(options$$1) {\\n    this.body = null;\\n    this.params = {};\\n    assign(this, options$$1, {\\n      method: toUpper(options$$1.method || 'GET')\\n    });\\n\\n    if (!(this.headers instanceof Headers)) {\\n      this.headers = new Headers(this.headers);\\n    }\\n  }\\n\\n  var _proto = Request.prototype;\\n\\n  _proto.getUrl = function getUrl() {\\n    return Url(this);\\n  };\\n\\n  _proto.getBody = function getBody() {\\n    return this.body;\\n  };\\n\\n  _proto.respondWith = function respondWith(body, options$$1) {\\n    return new Response(body, assign(options$$1 || {}, {\\n      url: this.getUrl()\\n    }));\\n  };\\n\\n  return Request;\\n}();\\n\\n/**\\n * Service for sending network requests.\\n */\\nvar COMMON_HEADERS = {\\n  'Accept': 'application/json, text/plain, */*'\\n};\\nvar JSON_CONTENT_TYPE = {\\n  'Content-Type': 'application/json;charset=utf-8'\\n};\\nfunction Http(options$$1) {\\n  var self = this || {},\\n      client = Client(self.$vm);\\n  defaults(options$$1 || {}, self.$options, Http.options);\\n  Http.interceptors.forEach(function (handler) {\\n    if (isString(handler)) {\\n      handler = Http.interceptor[handler];\\n    }\\n\\n    if (isFunction(handler)) {\\n      client.use(handler);\\n    }\\n  });\\n  return client(new Request(options$$1)).then(function (response) {\\n    return response.ok ? response : PromiseObj.reject(response);\\n  }, function (response) {\\n    if (response instanceof Error) {\\n      error(response);\\n    }\\n\\n    return PromiseObj.reject(response);\\n  });\\n}\\nHttp.options = {};\\nHttp.headers = {\\n  put: JSON_CONTENT_TYPE,\\n  post: JSON_CONTENT_TYPE,\\n  patch: JSON_CONTENT_TYPE,\\n  \\\"delete\\\": JSON_CONTENT_TYPE,\\n  common: COMMON_HEADERS,\\n  custom: {}\\n};\\nHttp.interceptor = {\\n  before: before,\\n  method: method,\\n  jsonp: jsonp,\\n  json: json,\\n  form: form,\\n  header: header,\\n  cors: cors\\n};\\nHttp.interceptors = ['before', 'method', 'jsonp', 'json', 'form', 'header', 'cors'];\\n['get', 'delete', 'head', 'jsonp'].forEach(function (method$$1) {\\n  Http[method$$1] = function (url, options$$1) {\\n    return this(assign(options$$1 || {}, {\\n      url: url,\\n      method: method$$1\\n    }));\\n  };\\n});\\n['post', 'put', 'patch'].forEach(function (method$$1) {\\n  Http[method$$1] = function (url, body, options$$1) {\\n    return this(assign(options$$1 || {}, {\\n      url: url,\\n      method: method$$1,\\n      body: body\\n    }));\\n  };\\n});\\n\\n/**\\n * Service for interacting with RESTful services.\\n */\\nfunction Resource(url, params, actions, options$$1) {\\n  var self = this || {},\\n      resource = {};\\n  actions = assign({}, Resource.actions, actions);\\n  each(actions, function (action, name) {\\n    action = merge({\\n      url: url,\\n      params: assign({}, params)\\n    }, options$$1, action);\\n\\n    resource[name] = function () {\\n      return (self.$http || Http)(opts(action, arguments));\\n    };\\n  });\\n  return resource;\\n}\\n\\nfunction opts(action, args) {\\n  var options$$1 = assign({}, action),\\n      params = {},\\n      body;\\n\\n  switch (args.length) {\\n    case 2:\\n      params = args[0];\\n      body = args[1];\\n      break;\\n\\n    case 1:\\n      if (/^(POST|PUT|PATCH)$/i.test(options$$1.method)) {\\n        body = args[0];\\n      } else {\\n        params = args[0];\\n      }\\n\\n      break;\\n\\n    case 0:\\n      break;\\n\\n    default:\\n      throw 'Expected up to 2 arguments [params, body], got ' + args.length + ' arguments';\\n  }\\n\\n  options$$1.body = body;\\n  options$$1.params = assign({}, options$$1.params, params);\\n  return options$$1;\\n}\\n\\nResource.actions = {\\n  get: {\\n    method: 'GET'\\n  },\\n  save: {\\n    method: 'POST'\\n  },\\n  query: {\\n    method: 'GET'\\n  },\\n  update: {\\n    method: 'PUT'\\n  },\\n  remove: {\\n    method: 'DELETE'\\n  },\\n  \\\"delete\\\": {\\n    method: 'DELETE'\\n  }\\n};\\n\\n/**\\n * Install plugin.\\n */\\n\\nfunction plugin(Vue) {\\n  if (plugin.installed) {\\n    return;\\n  }\\n\\n  Util(Vue);\\n  Vue.url = Url;\\n  Vue.http = Http;\\n  Vue.resource = Resource;\\n  Vue.Promise = PromiseObj;\\n  Object.defineProperties(Vue.prototype, {\\n    $url: {\\n      get: function get() {\\n        return options(Vue.url, this, this.$options.url);\\n      }\\n    },\\n    $http: {\\n      get: function get() {\\n        return options(Vue.http, this, this.$options.http);\\n      }\\n    },\\n    $resource: {\\n      get: function get() {\\n        return Vue.resource.bind(this);\\n      }\\n    },\\n    $promise: {\\n      get: function get() {\\n        var _this = this;\\n\\n        return function (executor) {\\n          return new Vue.Promise(executor, _this);\\n        };\\n      }\\n    }\\n  });\\n}\\n\\nif (typeof window !== 'undefined' && window.Vue && !window.Vue.resource) {\\n  window.Vue.use(plugin);\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (plugin);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/vue-resource/dist/vue-resource.esm.js\\n\")}});","extractedComments":[]}