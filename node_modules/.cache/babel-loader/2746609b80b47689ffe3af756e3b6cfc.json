{"remainingRequest":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\softwareDevelopment\\IM-Web\\src\\components\\message\\merger-message\\message-relay.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\softwareDevelopment\\IM-Web\\src\\components\\message\\merger-message\\message-relay.vue","mtime":1649851412191},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":1649851455045},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\vue-loader\\lib\\index.js","mtime":1649851455309},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\babel.config.js","mtime":1649851550121},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":1649851455045},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\vue-loader\\lib\\index.js","mtime":1649851455309}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:/project/softwareDevelopment/IM-Web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.array.sort\";\nimport _defineProperty from \"D:/project/softwareDevelopment/IM-Web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nimport ConversationSelectedList from \"../../conversation/conversation-selected-list\";\nexport default {\n  name: 'MessageBubble',\n  components: {\n    ConversationSelectedList: ConversationSelectedList\n  },\n  data: function data() {\n    return {\n      isTimeout: false,\n      showConversationList: false,\n      selectedConversation: [],\n      testMergerMessage: {}\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    if (this.$refs.dropdown && this.$refs.dropdown.$el) {\n      this.$refs.dropdown.$el.addEventListener('mousedown', this.handleDropDownMousedown);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.$refs.dropdown && this.$refs.dropdown.$el) {\n      this.$refs.dropdown.$el.removeEventListener('mousedown', this.handleDropDownMousedown);\n    }\n  },\n  updated: function updated() {},\n  computed: _objectSpread({}, mapState({\n    isShowConversationList: function isShowConversationList(state) {\n      return state.conversation.isShowConversationList;\n    },\n    selectedMessageList: function selectedMessageList(state) {\n      return state.conversation.selectedMessageList;\n    },\n    relayType: function relayType(state) {\n      return state.conversation.relayType;\n    },\n    relayMessage: function relayMessage(state) {\n      return state.conversation.relayMessage;\n    }\n  })),\n  methods: {\n    cancel: function cancel() {\n      this.$store.commit('showConversationList', false);\n    },\n    getList: function getList(value) {\n      this.selectedConversation = value;\n    },\n    sendSingleMessage: function sendSingleMessage(to, type, message) {\n      var _message = this.tim.createForwardMessage({\n        to: to,\n        conversationType: type,\n        payload: message,\n        priority: this.TIM.TYPES.MSG_PRIORITY_NORMAL\n      });\n\n      this.$store.commit('pushCurrentMessageList', _message); // ??\n\n      return _message;\n    },\n    mergerSort: function mergerSort() {\n      this.selectedMessageList.sort(function (a, b) {\n        if (a.time !== b.time) {\n          return a.time - b.time;\n        } else {\n          return a.sequence - b.sequence;\n        }\n      });\n    },\n    mergerMessage: function mergerMessage(to, type) {\n      var _abstractList = [],\n          _count = 0,\n          _title = '';\n      _count = this.selectedMessageList.length < 3 ? this.selectedMessageList.length : 3;\n\n      for (var i = 0; i < _count; i++) {\n        _abstractList.push(this.setAbstractList(this.selectedMessageList[i]));\n      }\n\n      _title = this.selectedMessageList[0].conversationType === 'GROUP' ? '群聊的聊天记录' : \"\".concat(this.selectedMessageList[0].nick || this.selectedMessageList[0].from, \" \\u548C \").concat(this.selectedMessageList[0].to, \" \\u7684\\u804A\\u5929\\u8BB0\\u5F55\");\n      var message = this.tim.createMergerMessage({\n        to: to,\n        conversationType: type,\n        payload: {\n          messageList: this.selectedMessageList,\n          title: _title,\n          abstractList: _abstractList,\n          compatibleText: '请升级IMSDK到v2.10.1或更高版本查看此消息'\n        }\n      });\n      this.$store.commit('pushCurrentMessageList', message); // ??\n\n      return message;\n    },\n    messageRelay: function () {\n      var _messageRelay = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _type, _to, _iterator, _step, item, message, _iterator2, _step2, selectedMessage, _message2, _message3;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _type = '', _to = '';\n                _iterator = _createForOfIteratorHelper(this.selectedConversation);\n                _context.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 37;\n                  break;\n                }\n\n                item = _step.value;\n\n                if (item.indexOf(this.TIM.TYPES.CONV_C2C) !== -1) {\n                  _type = this.TIM.TYPES.CONV_C2C;\n                  _to = item.substring(3, item.length);\n                }\n\n                if (item.indexOf(this.TIM.TYPES.CONV_GROUP) !== -1) {\n                  _type = this.TIM.TYPES.CONV_GROUP;\n                  _to = item.substring(5, item.length);\n                } // 排序\n\n\n                this.mergerSort();\n\n                if (this.relayType === 1) {\n                  message = this.sendSingleMessage(_to, _type, this.relayMessage);\n                  this.sendMessageHandler(message);\n                }\n\n                if (!(this.relayType === 2)) {\n                  _context.next = 34;\n                  break;\n                }\n\n                if (!(this.selectedMessageList.length > 30)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                this.$store.commit('showMessage', {\n                  message: '转发消息仅支持30条以内',\n                  type: 'error'\n                });\n                return _context.abrupt(\"return\");\n\n              case 14:\n                _iterator2 = _createForOfIteratorHelper(this.selectedMessageList);\n                _context.prev = 15;\n\n                _iterator2.s();\n\n              case 17:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 26;\n                  break;\n                }\n\n                selectedMessage = _step2.value;\n                _context.next = 21;\n                return this.sendSingleMessage(_to, _type, selectedMessage);\n\n              case 21:\n                _message2 = _context.sent;\n                _context.next = 24;\n                return this.tim.sendMessage(_message2).then(function (res) {\n                  return res;\n                }).catch(function (imError) {\n                  _this.$store.commit('showMessage', {\n                    message: imError.message,\n                    type: 'error'\n                  });\n                });\n\n              case 24:\n                _context.next = 17;\n                break;\n\n              case 26:\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](15);\n\n                _iterator2.e(_context.t0);\n\n              case 31:\n                _context.prev = 31;\n\n                _iterator2.f();\n\n                return _context.finish(31);\n\n              case 34:\n                if (this.relayType === 3) {\n                  _message3 = this.mergerMessage(_to, _type);\n                  this.sendMessageHandler(_message3);\n                }\n\n              case 35:\n                _context.next = 4;\n                break;\n\n              case 37:\n                _context.next = 42;\n                break;\n\n              case 39:\n                _context.prev = 39;\n                _context.t1 = _context[\"catch\"](2);\n\n                _iterator.e(_context.t1);\n\n              case 42:\n                _context.prev = 42;\n\n                _iterator.f();\n\n                return _context.finish(42);\n\n              case 45:\n                this.$store.commit('showConversationList', false);\n                this.$store.commit('resetSelectedMessage', false);\n\n              case 47:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 39, 42, 45], [15, 28, 31, 34]]);\n      }));\n\n      function messageRelay() {\n        return _messageRelay.apply(this, arguments);\n      }\n\n      return messageRelay;\n    }(),\n    sendMessageHandler: function sendMessageHandler(message) {\n      var _this2 = this;\n\n      this.tim.sendMessage(message).catch(function (imError) {\n        _this2.$store.commit('showMessage', {\n          message: imError.message,\n          type: 'error'\n        });\n      });\n    },\n    setAbstractList: function setAbstractList(message) {\n      var nick = message.nick || message.from;\n      var text = '';\n\n      switch (message.type) {\n        case this.TIM.TYPES.MSG_TEXT:\n          text = message.payload.text || '';\n\n          if (text.length > 20) {\n            text = text.slice(0, 20);\n          }\n\n          return \"\".concat(nick, \": \").concat(text);\n\n        case this.TIM.TYPES.MSG_MERGER:\n          return \"\".concat(nick, \": [\\u804A\\u5929\\u8BB0\\u5F55]\");\n\n        case this.TIM.TYPES.MSG_IMAGE:\n          return \"\".concat(nick, \": [\\u56FE\\u7247]\");\n\n        case this.TIM.TYPES.MSG_AUDIO:\n          return \"\".concat(nick, \": [\\u97F3\\u9891]\");\n\n        case this.TIM.TYPES.MSG_VIDEO:\n          return \"\".concat(nick, \": [\\u89C6\\u9891]\");\n\n        case this.TIM.TYPES.MSG_CUSTOM:\n          return \"\".concat(nick, \": [\\u81EA\\u5B9A\\u4E49\\u6D88\\u606F]\");\n\n        case this.TIM.TYPES.MSG_FILE:\n          return \"\".concat(nick, \": [\\u6587\\u4EF6]\");\n\n        case this.TIM.TYPES.MSG_FACE:\n          return \"\".concat(nick, \": [\\u52A8\\u753B\\u8868\\u60C5]\");\n      }\n    },\n    handleDropDownMousedown: function handleDropDownMousedown(e) {\n      if (e.buttons === 2) {\n        if (this.$refs.dropdown.visible) {\n          this.$refs.dropdown.hide();\n        } else {\n          this.$refs.dropdown.show();\n        }\n      }\n    }\n  }\n};",{"version":3,"mappings":"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","names":["name","components","ConversationSelectedList","data","isTimeout","showConversationList","selectedConversation","testMergerMessage","created","mounted","beforeDestroy","updated","computed","mapState","isShowConversationList","selectedMessageList","relayType","relayMessage","methods","cancel","getList","value","sendSingleMessage","to","type","message","conversationType","payload","priority","mergerSort","mergerMessage","_count","_abstractList","_title","messageList","title","abstractList","compatibleText","messageRelay","_type","_to","item","selectedMessage","then","catch","sendMessageHandler","setAbstractList","text","handleDropDownMousedown","e"],"sourceRoot":"src/components/message/merger-message","sources":["message-relay.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-bubble\" @mousedown.stop @contextmenu.prevent>\r\n        <div class=\"conversation-container\">\r\n            <ConversationSelectedList   @getList=\"getList\"></ConversationSelectedList>\r\n            <div class=\"conversation-list-btn\">\r\n                <span class=\"conversation-btn\" @click=\"cancel\">取消</span>\r\n                <span class=\"conversation-btn\" @click=\"messageRelay\">发送</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n  import { mapState } from 'vuex'\r\n  import ConversationSelectedList from '../../conversation/conversation-selected-list'\r\n\r\n  export default {\r\n    name: 'MessageBubble',\r\n    components: {\r\n      ConversationSelectedList\r\n    },\r\n    data() {\r\n      return {\r\n        isTimeout: false,\r\n        showConversationList: false,\r\n        selectedConversation: [],\r\n        testMergerMessage: {}\r\n      }\r\n    },\r\n    created() {\r\n    },\r\n    mounted() {\r\n      if (this.$refs.dropdown && this.$refs.dropdown.$el) {\r\n        this.$refs.dropdown.$el.addEventListener('mousedown', this.handleDropDownMousedown)\r\n      }\r\n    },\r\n    beforeDestroy() {\r\n      if (this.$refs.dropdown && this.$refs.dropdown.$el) {\r\n        this.$refs.dropdown.$el.removeEventListener('mousedown', this.handleDropDownMousedown)\r\n      }\r\n    },\r\n    updated() {\r\n    },\r\n    computed: {\r\n      ...mapState({\r\n        isShowConversationList: state => state.conversation.isShowConversationList,\r\n        selectedMessageList: state => state.conversation.selectedMessageList,\r\n        relayType: state => state.conversation.relayType,\r\n        relayMessage: state => state.conversation.relayMessage\r\n      }),\r\n    },\r\n    methods: {\r\n      cancel() {\r\n        this.$store.commit('showConversationList', false)\r\n      },\r\n      getList(value) {\r\n        this.selectedConversation = value\r\n\r\n      },\r\n      sendSingleMessage(to, type, message) {\r\n        const _message = this.tim.createForwardMessage({\r\n          to: to,\r\n          conversationType: type,\r\n          payload: message,\r\n          priority: this.TIM.TYPES.MSG_PRIORITY_NORMAL\r\n        })\r\n        this.$store.commit('pushCurrentMessageList', _message)   // ??\r\n        return _message\r\n      },\r\n      mergerSort() {\r\n        this.selectedMessageList.sort((a, b) =>  {\r\n          if(a.time !== b.time) {\r\n            return a.time - b.time\r\n          }else {\r\n            return a.sequence - b.sequence\r\n          }\r\n        })\r\n      },\r\n      mergerMessage(to, type) {\r\n        let _abstractList = [], _count = 0, _title = ''\r\n        _count = this.selectedMessageList.length < 3 ? this.selectedMessageList.length : 3\r\n\r\n        for(let i = 0; i < _count; i++) {\r\n          _abstractList.push(this.setAbstractList(this.selectedMessageList[i]))\r\n        }\r\n        _title = this.selectedMessageList[0].conversationType === 'GROUP' ? '群聊的聊天记录' : `${this.selectedMessageList[0].nick || this.selectedMessageList[0].from} 和 ${this.selectedMessageList[0].to} 的聊天记录`\r\n        let message = this.tim.createMergerMessage({\r\n          to: to,\r\n          conversationType: type,\r\n          payload: {\r\n            messageList: this.selectedMessageList ,\r\n            title: _title,\r\n            abstractList: _abstractList,\r\n            compatibleText: '请升级IMSDK到v2.10.1或更高版本查看此消息'\r\n          }\r\n        })\r\n        this.$store.commit('pushCurrentMessageList', message)   // ??\r\n        return message\r\n      },\r\n      async messageRelay() {\r\n        let _type = '', _to = ''\r\n        for (let item of this.selectedConversation) {\r\n          if(item.indexOf(this.TIM.TYPES.CONV_C2C) !== -1) {\r\n            _type = this.TIM.TYPES.CONV_C2C\r\n            _to = item.substring(3, item.length)\r\n          }\r\n          if(item.indexOf(this.TIM.TYPES.CONV_GROUP) !== -1) {\r\n            _type = this.TIM.TYPES.CONV_GROUP\r\n            _to = item.substring(5, item.length)\r\n          }\r\n          // 排序\r\n          this.mergerSort()\r\n          if (this.relayType === 1) {\r\n            let message = this.sendSingleMessage(_to, _type, this.relayMessage)\r\n            this.sendMessageHandler(message)\r\n          }\r\n\r\n          if (this.relayType === 2) {\r\n            if(this.selectedMessageList.length > 30) {\r\n              this.$store.commit('showMessage', {\r\n                message: '转发消息仅支持30条以内',\r\n                type: 'error'\r\n              })\r\n              return\r\n            }\r\n            for (let selectedMessage of this.selectedMessageList) {\r\n              let message = await this.sendSingleMessage(_to, _type, selectedMessage)\r\n              await this.tim.sendMessage(message)\r\n                .then((res) => {\r\n                  return res\r\n                })\r\n                .catch(imError => {\r\n                  this.$store.commit('showMessage', {\r\n                    message: imError.message,\r\n                    type: 'error'\r\n                  })\r\n                })\r\n\r\n            }\r\n          }\r\n          if (this.relayType === 3) {\r\n            let message = this.mergerMessage(_to, _type)\r\n            this.sendMessageHandler(message)\r\n          }\r\n        }\r\n        this.$store.commit('showConversationList', false)\r\n        this.$store.commit('resetSelectedMessage', false)\r\n      },\r\n\r\n      sendMessageHandler(message) {\r\n        this.tim.sendMessage(message).catch(imError => {\r\n            this.$store.commit('showMessage', {\r\n              message: imError.message,\r\n              type: 'error'\r\n            })\r\n          })\r\n      },\r\n      setAbstractList(message) {\r\n        let nick = message.nick || message.from\r\n        let text = ''\r\n        switch (message.type) {\r\n          case this.TIM.TYPES.MSG_TEXT:\r\n            text = message.payload.text || ''\r\n            if (text.length > 20) {\r\n              text = text.slice(0, 20)\r\n            }\r\n            return `${nick}: ${text}`\r\n          case this.TIM.TYPES.MSG_MERGER:\r\n            return `${nick}: [聊天记录]`\r\n          case this.TIM.TYPES.MSG_IMAGE:\r\n            return `${nick}: [图片]`\r\n          case this.TIM.TYPES.MSG_AUDIO:\r\n            return `${nick}: [音频]`\r\n          case this.TIM.TYPES.MSG_VIDEO:\r\n            return `${nick}: [视频]`\r\n          case this.TIM.TYPES.MSG_CUSTOM:\r\n            return `${nick}: [自定义消息]`\r\n          case this.TIM.TYPES.MSG_FILE:\r\n            return `${nick}: [文件]`\r\n          case this.TIM.TYPES.MSG_FACE:\r\n            return `${nick}: [动画表情]`\r\n        }\r\n      },\r\n      handleDropDownMousedown(e) {\r\n        if (e.buttons === 2) {\r\n          if (this.$refs.dropdown.visible) {\r\n            this.$refs.dropdown.hide()\r\n          } else {\r\n            this.$refs.dropdown.show()\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n    .conversation-container {\r\n        position absolute\r\n        top 0\r\n        left 0\r\n        right 0\r\n        width 80%\r\n        margin auto\r\n        background-color #fff\r\n        z-index 999\r\n    }\r\n    .conversation-list-btn {\r\n        width 140px\r\n        display flex\r\n        float right\r\n        margin 10px 0\r\n        .conversation-btn {\r\n            cursor pointer\r\n            padding 6px 12px\r\n            background #00A4FF\r\n            color #ffffff\r\n            font-size 14px\r\n            border-radius 20px\r\n            margin-left 13px\r\n        }\r\n    }\r\n</style>\r\n"]}]}