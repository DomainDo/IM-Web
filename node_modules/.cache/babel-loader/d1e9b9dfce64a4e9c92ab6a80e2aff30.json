{"remainingRequest":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\softwareDevelopment\\IM-Web\\src\\components\\conversation\\conversation-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\softwareDevelopment\\IM-Web\\src\\components\\conversation\\conversation-item.vue","mtime":1649851412184},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":1649851455045},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\vue-loader\\lib\\index.js","mtime":1649851455309},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\babel.config.js","mtime":1649851550121},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":1649851455045},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649851454799},{"path":"D:\\project\\softwareDevelopment\\IM-Web\\node_modules\\vue-loader\\lib\\index.js","mtime":1649851455309}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:/project/softwareDevelopment/IM-Web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapState } from 'vuex';\nimport { isToday, getDate, getTime } from \"../../utils/date\";\nexport default {\n  name: 'conversation-item',\n  props: ['conversation'],\n  data: function data() {\n    return {\n      popoverVisible: false,\n      showMessageAtMe_text: ''\n    };\n  },\n  computed: _objectSpread(_objectSpread({\n    hasMessageAtMe: function hasMessageAtMe() {\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.groupAtInfoList && this.conversation.groupAtInfoList.length > 0;\n    },\n    messageAtMeText: function messageAtMeText() {\n      var _this = this;\n\n      var text = '';\n\n      if (this.conversation.groupAtInfoList.length > 0) {\n        this.conversation.groupAtInfoList.forEach(function (item) {\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ME) {\n            text.indexOf('[@所有人]') !== -1 ? text = '[@所有人][有人@我]' : text = '[有人@我]';\n          }\n\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ALL) {\n            text.indexOf('[有人@我]') !== -1 ? text = '[有人@我][@所有人]' : text = '[@所有人]';\n          }\n\n          if (item.atTypeArray[0] === _this.TIM.TYPES.CONV_AT_ALL_AT_ME) {\n            text = '[@所有人][有人@我]';\n          }\n        });\n      }\n\n      return text;\n    },\n    showUnreadCount: function showUnreadCount() {\n      if (this.$store.getters.hidden) {\n        return this.conversation.unreadCount > 0;\n      } // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\n\n\n      return this.currentConversation.conversationID !== this.conversation.conversationID && this.conversation.unreadCount > 0;\n    },\n    date: function date() {\n      if (!this.conversation.lastMessage || !this.conversation.lastMessage.lastTime) {\n        return '';\n      }\n\n      var date = new Date(this.conversation.lastMessage.lastTime * 1000);\n\n      if (isToday(date)) {\n        return getTime(date);\n      }\n\n      return getDate(date);\n    },\n    avatar: function avatar() {\n      switch (this.conversation.type) {\n        case 'GROUP':\n          return this.conversation.groupProfile.avatar;\n\n        case 'C2C':\n          return this.conversation.userProfile.avatar;\n\n        default:\n          return '';\n      }\n    },\n    conversationName: function conversationName() {\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID;\n      }\n\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\n        return '系统通知';\n      }\n\n      return '';\n    },\n    showGrayBadge: function showGrayBadge() {\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\n        return false;\n      }\n\n      return this.conversation.groupProfile.selfInfo.messageRemindType === 'AcceptNotNotify';\n    },\n    messageForShow: function messageForShow() {\n      if (this.conversation.lastMessage.isRevoked) {\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\n          return '你撤回了一条消息';\n        }\n\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\n          return '对方撤回了一条消息';\n        }\n\n        return \"\".concat(this.conversation.lastMessage.fromAccount, \"\\u64A4\\u56DE\\u4E86\\u4E00\\u6761\\u6D88\\u606F\");\n      }\n\n      return this.conversation.lastMessage.messageForShow;\n    }\n  }, mapState({\n    currentConversation: function currentConversation(state) {\n      return state.conversation.currentConversation;\n    },\n    currentUserProfile: function currentUserProfile(state) {\n      return state.user.currentUserProfile;\n    }\n  })), mapGetters(['toAccount'])),\n  mounted: function mounted() {},\n  methods: {\n    selectConversation: function selectConversation() {\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\n        this.$store.dispatch('checkoutConversation', this.conversation.conversationID);\n      }\n    },\n    deleteConversation: function deleteConversation(event) {\n      var _this2 = this;\n\n      // 停止冒泡，避免和点击会话的事件冲突\n      event.stopPropagation();\n      this.tim.deleteConversation(this.conversation.conversationID).then(function () {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u6210\\u529F!\"),\n          type: 'success'\n        });\n\n        _this2.popoverVisible = false;\n\n        _this2.$store.commit('resetCurrentConversation');\n      }).catch(function (error) {\n        _this2.$store.commit('showMessage', {\n          message: \"\\u4F1A\\u8BDD\\u3010\".concat(_this2.conversationName, \"\\u3011\\u5220\\u9664\\u5931\\u8D25!, error=\").concat(error.message),\n          type: 'error'\n        });\n\n        _this2.popoverVisible = false;\n      });\n    },\n    showContextMenu: function showContextMenu() {\n      this.popoverVisible = true;\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACAA,2BADA;AAEAC,yBAFA;AAGAC,MAHA,kBAGA;AACA;AACAC,2BADA;AAEAC;AAFA;AAIA,GARA;AASAC;AACAC,kBADA,4BACA;AACA,aACA,4CACA,gCADA,IACA,iCADA,IACA,4CAFA;AAIA,KANA;AAOAC,mBAPA,6BAOA;AAAA;;AACA;;AACA;AACA;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AACA;AACAA;AACA;AACA,SAVA;AAWA;;AACA;AACA,KAvBA;AAwBAC,mBAxBA,6BAwBA;AACA;AACA;AACA,OAHA,CAIA;;;AACA,aACA,4CACA,gCADA,IACA,iCAFA;AAIA,KAjCA;AAkCAC,QAlCA,kBAkCA;AACA,UACA,kCACA,uCAFA,EAGA;AACA;AACA;;AACA;;AACA;AACA;AACA;;AACA;AACA,KA9CA;AA+CAC;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AANA;AAQA,KAxDA;AAyDAC;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,KApEA;AAqEAC,iBArEA,2BAqEA;AACA;AACA;AACA;;AACA,aACA,8DACA,iBAFA;AAIA,KA7EA;AA8EAC,kBA9EA,4BA8EA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AAzFA,KA0FAC;AACAC;AAAA;AAAA,KADA;AAEAC;AAAA;AAAA;AAFA,IA1FA,GA8FAC,yBA9FA,CATA;AAyGAC,SAzGA,qBAyGA,CAEA,CA3GA;AA4GAC;AACAC,sBADA,gCACA;AACA;AACA,6BACA,sBADA,EAEA,gCAFA;AAIA;AACA,KARA;AASAC,sBATA,8BASAC,KATA,EASA;AAAA;;AACA;AACAA;AACA,eACAD,kBADA,CACA,gCADA,EAEAE,IAFA,CAEA;AACA;AACAC,0GADA;AAEAC;AAFA;;AAIA;;AACA;AACA,OATA,EAUAC,KAVA,CAUA;AACA;AACAF,wIADA;AAEAC;AAFA;;AAIA;AACA,OAhBA;AAiBA,KA7BA;AA8BAE,mBA9BA,6BA8BA;AACA;AACA;AAhCA;AA5GA","names":["name","props","data","popoverVisible","showMessageAtMe_text","computed","hasMessageAtMe","messageAtMeText","text","showUnreadCount","date","avatar","conversationName","showGrayBadge","messageForShow","mapState","currentConversation","currentUserProfile","mapGetters","mounted","methods","selectConversation","deleteConversation","event","then","message","type","catch","showContextMenu"],"sourceRoot":"src/components/conversation","sources":["conversation-item.vue"],"sourcesContent":["<template>\r\n    <div\r\n        class=\"conversation-item-container\"\r\n        :class=\"{ 'choose': conversation.conversationID === currentConversation.conversationID }\"\r\n        @click=\"selectConversation\"\r\n    >\r\n      <div class=\"close-btn\">\r\n        <span class=\"tim-icon-close\" title=\"删除会话\" @click=\"deleteConversation\"></span>\r\n      </div>\r\n      <div class=\"warp\">\r\n        <avatar :src=\"avatar\" :type=\"conversation.type\" />\r\n        <div class=\"content\">\r\n          <div class=\"row-1\">\r\n            <div class=\"name\">\r\n              <div class=\"text-ellipsis\">\r\n                <span :title=\"conversation.userProfile.nick || conversation.userProfile.userID\"\r\n                  v-if=\"conversation.type ===  TIM.TYPES.CONV_C2C\"\r\n                  >{{conversation.remark || conversation.userProfile.nick || conversation.userProfile.userID}}\r\n                </span>\r\n                <span :title=\"conversation.groupProfile.name || conversation.groupProfile.groupID\"\r\n                  v-else-if=\"conversation.type ===  TIM.TYPES.CONV_GROUP\"\r\n                  >{{conversation.groupProfile.name || conversation.groupProfile.groupID}}\r\n                </span>\r\n                <span\r\n                  v-else-if=\"conversation.type === TIM.TYPES.CONV_SYSTEM\"\r\n                  >系统通知\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"unread-count\">\r\n              <span class=\"badge\" v-if=\"showUnreadCount\">\r\n                {{conversation.unreadCount > 99 ? '99+' : conversation.unreadCount}}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"row-2\">\r\n            <div class=\"summary\">\r\n              <div v-if=\"conversation.lastMessage\" class=\"text-ellipsis\">\r\n                <span class=\"remind\"  v-if=\"hasMessageAtMe\">{{messageAtMeText}}</span>\r\n                <span class=\"text\" :title=\"conversation.lastMessage.messageForShow\">\r\n                  {{messageForShow}}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"date\">\r\n              {{date}}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapState } from 'vuex'\r\nimport { isToday, getDate, getTime } from '../../utils/date'\r\nexport default {\r\n  name: 'conversation-item',\r\n  props: ['conversation'],\r\n  data() {\r\n    return {\r\n      popoverVisible: false,\r\n      showMessageAtMe_text:''\r\n    }\r\n  },\r\n  computed: {\r\n    hasMessageAtMe() {\r\n      return (\r\n              this.currentConversation.conversationID !==\r\n              this.conversation.conversationID && this.conversation.groupAtInfoList && this.conversation.groupAtInfoList.length > 0\r\n      )\r\n    },\r\n    messageAtMeText() {\r\n      let text = ''\r\n      if (this.conversation.groupAtInfoList.length > 0) {\r\n        this.conversation.groupAtInfoList.forEach((item) => {\r\n          if (item.atTypeArray[0] === this.TIM.TYPES.CONV_AT_ME) {\r\n            text.indexOf('[@所有人]') !== -1 ? text = '[@所有人][有人@我]' : text = '[有人@我]'\r\n          }\r\n          if (item.atTypeArray[0] === this.TIM.TYPES.CONV_AT_ALL) {\r\n            text.indexOf('[有人@我]') !== -1 ? text = '[有人@我][@所有人]' : text = '[@所有人]'\r\n          }\r\n          if (item.atTypeArray[0] === this.TIM.TYPES.CONV_AT_ALL_AT_ME) {\r\n            text = '[@所有人][有人@我]'\r\n          }\r\n        })\r\n      }\r\n      return text\r\n    },\r\n    showUnreadCount() {\r\n      if (this.$store.getters.hidden) {\r\n        return this.conversation.unreadCount > 0\r\n      }\r\n      // 是否显示未读计数。当前会话和未读计数为0的会话，不显示。\r\n      return (\r\n        this.currentConversation.conversationID !==\r\n          this.conversation.conversationID && this.conversation.unreadCount > 0\r\n      )\r\n    },\r\n    date() {\r\n      if (\r\n        !this.conversation.lastMessage ||\r\n        !this.conversation.lastMessage.lastTime\r\n      ) {\r\n        return ''\r\n      }\r\n      const date = new Date(this.conversation.lastMessage.lastTime * 1000)\r\n      if (isToday(date)) {\r\n        return getTime(date)\r\n      }\r\n      return getDate(date)\r\n    },\r\n    avatar: function() {\r\n      switch (this.conversation.type) {\r\n        case 'GROUP':\r\n          return this.conversation.groupProfile.avatar\r\n        case 'C2C':\r\n          return this.conversation.userProfile.avatar\r\n        default:\r\n          return ''\r\n      }\r\n    },\r\n    conversationName: function() {\r\n      if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\r\n        return this.conversation.userProfile.nick || this.conversation.userProfile.userID\r\n      }\r\n      if (this.conversation.type === this.TIM.TYPES.CONV_GROUP) {\r\n        return this.conversation.groupProfile.name || this.conversation.groupProfile.groupID\r\n      }\r\n      if (this.conversation.type === this.TIM.TYPES.CONV_SYSTEM) {\r\n        return '系统通知'\r\n      }\r\n      return ''\r\n    },\r\n    showGrayBadge() {\r\n      if (this.conversation.type !== this.TIM.TYPES.CONV_GROUP) {\r\n        return false\r\n      }\r\n      return (\r\n        this.conversation.groupProfile.selfInfo.messageRemindType ===\r\n        'AcceptNotNotify'\r\n      )\r\n    },\r\n    messageForShow() {\r\n      if (this.conversation.lastMessage.isRevoked) {\r\n        if (this.conversation.lastMessage.fromAccount === this.currentUserProfile.userID) {\r\n          return '你撤回了一条消息'\r\n        }\r\n        if (this.conversation.type === this.TIM.TYPES.CONV_C2C) {\r\n          return '对方撤回了一条消息'\r\n        }\r\n        return `${this.conversation.lastMessage.fromAccount}撤回了一条消息`\r\n      }\r\n      return this.conversation.lastMessage.messageForShow\r\n    },\r\n    ...mapState({\r\n      currentConversation: state => state.conversation.currentConversation,\r\n      currentUserProfile: state => state.user.currentUserProfile\r\n    }),\r\n    ...mapGetters(['toAccount'])\r\n  },\r\n  mounted() {\r\n\r\n  },\r\n  methods: {\r\n    selectConversation() {\r\n      if (this.conversation.conversationID !== this.currentConversation.conversationID) {\r\n        this.$store.dispatch(\r\n          'checkoutConversation',\r\n          this.conversation.conversationID\r\n        )\r\n      }\r\n    },\r\n    deleteConversation(event) {\r\n      // 停止冒泡，避免和点击会话的事件冲突\r\n      event.stopPropagation()\r\n      this.tim\r\n        .deleteConversation(this.conversation.conversationID)\r\n        .then(() => {\r\n          this.$store.commit('showMessage', {\r\n            message: `会话【${this.conversationName}】删除成功!`,\r\n            type: 'success'\r\n          })\r\n          this.popoverVisible = false\r\n          this.$store.commit('resetCurrentConversation')\r\n        })\r\n        .catch(error => {\r\n          this.$store.commit('showMessage', {\r\n            message: `会话【${this.conversationName}】删除失败!, error=${error.message}`,\r\n            type: 'error'\r\n          })\r\n          this.popoverVisible = false\r\n        })\r\n    },\r\n    showContextMenu() {\r\n      this.popoverVisible = true\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n.conversation-item-container\r\n  padding 15px 20px\r\n  cursor pointer\r\n  position relative\r\n  overflow hidden\r\n  transition .2s\r\n  // &:first-child\r\n  //   padding-top 30px\r\n  &:hover\r\n    background-color $background\r\n    .close-btn\r\n      right 3px\r\n  .close-btn\r\n    position absolute\r\n    right -20px\r\n    top 3px\r\n    color $font-dark\r\n    transition: all .2s ease;\r\n    &:hover\r\n      color $danger\r\n  .warp\r\n    display flex\r\n  .avatar\r\n    width 40px\r\n    height 40px\r\n    margin-right 10px\r\n    border-radius 50%\r\n    flex-shrink 0\r\n  .content\r\n    flex 1\r\n    height 40px\r\n    overflow hidden\r\n    .row-1\r\n      display flex\r\n      line-height 21px\r\n      .name\r\n        color $font-light\r\n        flex 1\r\n        min-width 0px\r\n      .unread-count\r\n        padding-left 10px\r\n        flex-shrink 0\r\n        color $font-dark\r\n        font-size 12px\r\n        .badge\r\n          vertical-align bottom\r\n          background-color $danger\r\n          border-radius 10px\r\n          color #FFF\r\n          display inline-block\r\n          font-size 12px\r\n          height 18px\r\n          max-width 40px\r\n          line-height 18px\r\n          padding 0 6px\r\n          text-align center\r\n          white-space nowrap\r\n    .row-2\r\n      display flex\r\n      font-size 12px\r\n      padding-top 3px\r\n      .summary\r\n        flex 1\r\n        overflow hidden\r\n        min-width 0px\r\n        color: $secondary\r\n        .remind\r\n          color $danger\r\n      .date\r\n        padding-left 10px\r\n        flex-shrink 0\r\n        text-align right\r\n        color $font-dark\r\n.choose {\r\n  background-color: $background;\r\n}\r\n.context-menu-button {\r\n  padding: 10px\r\n  border: 2px solid $primary;\r\n  border-radius: 8px;\r\n}\r\n</style>\r\n"]}]}